namespace WhatsMerged.Base.Models
{
    /// <summary>
    /// The table type that is generated by the Engine class.
    /// </summary>
    public class MergeTable
    {
        /// <summary>
        /// Total number of Rows in the 2D Cells array. Can only be set through the Constructor.
        /// </summary>
        public readonly int RowCount;

        /// <summary>
        /// The number of Rows for which it makes sense to display as frozen rows. Can only be set through the Constructor.
        /// </summary>
        public readonly int RowFrozenCount;

        /// <summary>
        /// Total number of Columns in the 2D Cells array. Can only be set through the Constructor.
        /// </summary>
        public readonly int ColCount;

        /// <summary>
        /// The number of Columns for which it makes sense to display as frozen columns. Can only be set through the Constructor.
        /// </summary>
        public readonly int ColFrozenCount;

        /// <summary>
        /// Row headers for display to the left of the 2D Cells array. Will be null if the Constructor was called with hasRowHeaders=false.
        /// </summary>
        public readonly MergeHeader[] RowHeaders;

        /// <summary>
        /// Column headers for display above the 2D Cells array. Will be null if the Constructor was called with hasColHeaders=false.
        /// </summary>
        public readonly MergeHeader[] ColHeaders;

        /// <summary>
        /// The 2D array of MergeCell objects. Each MergeCell will have a text and a type that can be used for displaying the Merge Table to the user.
        /// </summary>
        public MergeCell[,] Cells; // Usage: Cells[row, col]

        /// <summary>
        /// MergeTable Constructor.
        /// </summary>
        /// <param name="rowCount"></param>
        /// <param name="rowFrozenCount"></param>
        /// <param name="colCount"></param>
        /// <param name="colFrozenCount"></param>
        /// <param name="hasRowHeaders"></param>
        /// <param name="hasColHeaders"></param>
        public MergeTable(int rowCount, int rowFrozenCount, int colCount, int colFrozenCount, bool hasRowHeaders, bool hasColHeaders)
        {
            RowCount = rowCount;
            RowFrozenCount = rowFrozenCount;

            ColCount = colCount;
            ColFrozenCount = colFrozenCount;

            if (hasRowHeaders) RowHeaders = new MergeHeader[rowCount];
            if (hasColHeaders) ColHeaders = new MergeHeader[colCount];

            Cells = new MergeCell[rowCount, colCount];
        }
    }
}